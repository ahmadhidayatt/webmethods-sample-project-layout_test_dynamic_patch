pipeline {
    agent any 
    
    parameters {
        string(name: 'IS_PACKAGES_PATH',
               defaultValue: './assets/IS/Packages',
               description: 'Path to IS Packages directory relative to workspace')
        choice(name: 'DEPLOYMENT_MODE',
               choices: ['full', 'patch'],
               description: 'Select deployment mode')
    }

    stages {
        stage('Build') {
            steps {
                bat "\"${env.SAG_HOME}\\common\\lib\\ant\\bin\\ant\" -DSAGHome=\"${env.SAG_HOME}\" -DSAG_CI_HOME_DYNAMIC=\"${env.SAG_CI_HOME_DYNAMIC}\" -DprojectName=\"${env.JOB_NAME}\" -DisPackages=\"${params.IS_PACKAGES_PATH}\" build"
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    if (params.DEPLOYMENT_MODE == 'patch') {
                        def objectsList = generateObjectsList(params.IS_PACKAGES_PATH)
                        if (!objectsList) {
                            error('No packages found for patch deployment')
                        }
                        
                        // Use proper escaping for Windows paths
                        def escapedObjects = objectsList.replace('\\', '/')
                        
                        echo "Objects to deploy: ${escapedObjects}"
                        
                        bat "\"${env.SAG_HOME}\\common\\lib\\ant\\bin\\ant\" -DSAGHome=\"${env.SAG_HOME}\" -DSAG_CI_HOME_DYNAMIC=\"${env.SAG_CI_HOME_DYNAMIC}\" -DprojectName=\"${env.JOB_NAME}\" -DobjectsToDeploy=\"${escapedObjects}\" patch"
                    } else {
                        bat "\"${env.SAG_HOME}\\common\\lib\\ant\\bin\\ant\" -DSAGHome=\"${env.SAG_HOME}\" -DSAG_CI_HOME_DYNAMIC=\"${env.SAG_CI_HOME_DYNAMIC}\" -DprojectName=\"${env.JOB_NAME}\" deploy"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                bat "\"${env.SAG_HOME}\\common\\lib\\ant\\bin\\ant\" -DSAGHome=\"${env.SAG_HOME}\" -DSAG_CI_HOME_DYNAMIC=\"${env.SAG_CI_HOME_DYNAMIC}\" -DprojectName=\"${env.JOB_NAME}\" test"
                junit 'report/**/*.xml'
            }
        }
    }
    
    post {
        always {
            echo "Pipeline completed with status: ${currentBuild.currentResult}"
        }
        success {
            script {
                if (params.DEPLOYMENT_MODE == 'patch') {
                    def objectsList = generateObjectsList(params.IS_PACKAGES_PATH)
                    echo "Patch deployment successful for services: ${objectsList}"
                } else {
                    echo "Full deployment completed successfully"
                }
            }
        }
        failure {
            echo "Pipeline failed - please check logs for details"
        }
    }
}

// Improved function to generate objects list
def generateObjectsList(packagesPath) {
    def dirPath = "${env.WORKSPACE}/${packagesPath}"
    def dir = new File(dirPath)
    
    echo "Scanning directory: ${dirPath}"
    
    if (!dir.exists()) {
        error("Package directory not found: ${dir.path}")
    }
    
    def objects = []
    def excludedDirs = ['config', 'resources', 'replicate']
    
    try {
        // List all directories under the packages path
        def packageDirs = dir.listFiles({ f -> f.isDirectory() } as FileFilter)
        
        packageDirs.each { packageDir ->
            // Check namespace directories (like 'ns' in your path)
            def nsDirs = packageDir.listFiles({ f -> f.isDirectory() } as FileFilter)
            
            nsDirs.each { nsDir ->
                // Check service directories under namespace
                def serviceDirs = nsDir.listFiles({ f -> f.isDirectory() } as FileFilter)
                
                serviceDirs.each { serviceDir ->
                    def relativePath = "${packageDir.name}/${nsDir.name}/${serviceDir.name}"
                    def isExcluded = excludedDirs.any { relativePath.contains("/${it}") || relativePath.endsWith("/${it}") }
                    
                    if (!isExcluded) {
                        objects.add(relativePath)
                        echo "Found package: ${relativePath}"
                    }
                }
            }
        }
    } catch(Exception e) {
        error("Error scanning package directory: ${e.message}")
    }
    
    if (objects.isEmpty()) {
        return null
    }
    
    return objects.join(',')
}
