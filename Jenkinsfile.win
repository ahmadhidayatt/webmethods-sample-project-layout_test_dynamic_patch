pipeline {
    agent any 
    
    parameters {
        string(name: 'IS_PACKAGES_PATH',
               defaultValue: './assets/IS/Packages',
               description: 'Path to IS Packages directory relative to workspace')
        choice(name: 'DEPLOYMENT_MODE',
               choices: ['full', 'patch'],
               description: 'Select deployment mode')
    }

    stages {
        stage('Build') {
            steps {
                bat "\"${env.SAG_HOME}\\common\\lib\\ant\\bin\\ant\" -DSAGHome=\"${env.SAG_HOME}\" -DSAG_CI_HOME_DYNAMIC=\"${env.SAG_CI_HOME_DYNAMIC}\" -DprojectName=\"${env.JOB_NAME}\" -DisPackages=\"${params.IS_PACKAGES_PATH}\" build"
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    if (params.DEPLOYMENT_MODE == 'patch') {
                        def objectsList = generateObjectsList(params.IS_PACKAGES_PATH)
                        if (!objectsList) {
                            error('No packages found for patch deployment')
                        }
                        
                        // Use proper escaping for Windows paths
                        def escapedObjects = objectsList.replace('\\', '/')
                        
                        echo "Objects to deploy: ${escapedObjects}"
                        
                        bat "\"${env.SAG_HOME}\\common\\lib\\ant\\bin\\ant\" -DSAGHome=\"${env.SAG_HOME}\" -DSAG_CI_HOME_DYNAMIC=\"${env.SAG_CI_HOME_DYNAMIC}\" -DprojectName=\"${env.JOB_NAME}\" -DobjectsToDeploy=\"${escapedObjects}\" patch"
                    } else {
                        bat "\"${env.SAG_HOME}\\common\\lib\\ant\\bin\\ant\" -DSAGHome=\"${env.SAG_HOME}\" -DSAG_CI_HOME_DYNAMIC=\"${env.SAG_CI_HOME_DYNAMIC}\" -DprojectName=\"${env.JOB_NAME}\" deploy"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                bat "\"${env.SAG_HOME}\\common\\lib\\ant\\bin\\ant\" -DSAGHome=\"${env.SAG_HOME}\" -DSAG_CI_HOME_DYNAMIC=\"${env.SAG_CI_HOME_DYNAMIC}\" -DprojectName=\"${env.JOB_NAME}\" test"
                junit 'report/**/*.xml'
            }
        }
    }
    
    post {
        always {
            echo "Pipeline completed with status: ${currentBuild.currentResult}"
        }
        success {
            script {
                if (params.DEPLOYMENT_MODE == 'patch') {
                    def objectsList = generateObjectsList(params.IS_PACKAGES_PATH)
                    echo "Patch deployment successful for services: ${objectsList}"
                } else {
                    echo "Full deployment completed successfully"
                }
            }
        }
        failure {
            echo "Pipeline failed - please check logs for details"
        }
    }
}

def generateObjectsList(packagesPath) {
    // Convert packagesPath to Windows format
    def dirPath = "${env.WORKSPACE}\\${packagesPath}".replace('/', '\\')
    echo "Scanning directory: ${dirPath}"
    
    def objects = []
    def excludedDirs = ['config', 'resources', 'replicate']
    
    try {
        // Use bat command with proper escaping
        def result = bat(script: """
            @echo off
            cd "${dirPath}"
            for /f "tokens=*" %%a in ('dir /b /s /ad ^| findstr /i /r "\\\\[^\\\\]*\\\\[^\\\\]*$"') do (
                echo %%~a
            )
        """, returnStdout: true).trim()
        
        // Process the output
        result.eachLine { line ->
            def path = line.substring(dirPath.length() + 1).replace('\\', '/')
            def parts = path.split('/')
            
            // Only include paths with exactly two levels (ns/service)
            if (parts.size() == 2) {
                def isExcluded = excludedDirs.any { excl -> 
                    path.contains("/${excl}") || path.endsWith("/${excl}") 
                }
                if (!isExcluded) {
                    objects.add(path)
                    echo "Found package: ${path}"
                }
            }
        }
    } catch(Exception e) {
        error("Error scanning package directory: ${e.message}")
    }
    
    if (objects.isEmpty()) {
        error("No valid packages found in ${dirPath}. Expected structure: ${packagesPath}/ns/service")
    }
    
    return objects.join(',')
}
